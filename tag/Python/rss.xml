<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>jekyller.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>Stay hungry, stay foolish.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Flask Web 开发学习笔记（一）</title>
	  <link>//flask-web-01</link>
	  <author></author>
	  <pubDate>2018-04-26T08:13:54+08:00</pubDate>
	  <guid>//flask-web-01</guid>
	  <description><![CDATA[
	     <p>本教程前提：</p>
<ul>
  <li>Python 3</li>
  <li>macOS 环境</li>
</ul>

<h2 id="虚拟环境">虚拟环境</h2>

<p>安装 Flask 最便捷的方式是使用虚拟环境。虚拟环境是 Python 解释器的一个私有副本，在这个环境中你可以安装私有包，而且不会影响系统中安装的全局 Python 解释器。</p>

<p>虚拟环境非常有用，可以在系统的 Python 解释器中避免包的混乱和版本的冲突。为每个程序单独创建虚拟环境可以保证程序只能访问虚拟环境中的包，从而保持全局解释器的干净整洁，使其只作为创建（更多）虚拟环境的源。使用虚拟环境还有个好处，那就是不需要管理员权限。</p>

<h5 id="1创建虚拟环境">1.创建虚拟环境</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 -m venv XXX
</code></pre></div></div>

<h5 id="2激活虚拟环境创建的虚拟环境目录为-venv">2.激活虚拟环境（创建的虚拟环境目录为 <code class="highlighter-rouge">venv</code>）</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ source venv/bin/activate
</code></pre></div></div>

<h5 id="3退出虚拟环境">3.退出虚拟环境：</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(venv) $ deactivate
</code></pre></div></div>

<h2 id="使用-pip-安装-python-包">使用 pip 安装 Python 包</h2>

<p>大多数 Python 包都使用 pip 命令安装，使用 pip 安装 Flask（其它 Python 包同理）：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(venv) $ pip install flask
</code></pre></div></div>

<h2 id="一个简单的-demo">一个简单的 Demo</h2>

<p>./index.py</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
    return '&lt;h1&gt;Hello World!&lt;/h1&gt;'

@app.route('/user/&lt;name&gt;')
def sayHello(name):
    return '&lt;h1&gt;Hello %s!&lt;/h1&gt;' % name

if __name__ == '__main__':
    app.run(debug=True)
</code></pre></div></div>

<p>启动程序：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(venv) $ python index.py
</code></pre></div></div>

<p>访问 <a href="http://localhost:5000/">http://localhost:5000/</a> 输出 Hello World！<br />
访问 <a href="http://localhost:5000/user/Tom">http://localhost:5000/user/Tom</a> 输出  Hello Tom！</p>

<p>从 Demo 中学习路由、修饰器、视图函数、请求、响应概念，一步步分析每行代码：</p>

<h5 id="1-from-flask-import-flask">1. from flask import Flask</h5>

<p>从 flask 库中导入 <code class="highlighter-rouge">Flask</code> 函数</p>

<h5 id="2-app--flaskname">2. app = Flask(<strong>name</strong>)</h5>

<p>创建 <code class="highlighter-rouge">Flask</code> 对象 app，Flask 类的构造函数只有一个必须指定的参数，即程序主模块或包的名字。在大多数程序中，Python 的 <code class="highlighter-rouge">__name__</code> 变量就是所需要的值。</p>

<h5 id="3-approute">3. @app.route(‘/’)</h5>

<p>客户端（例如 Web 浏览器）把请求发送给 Web 服务器，Web 服务器再把请求发送给 Flask 程序实例。程序实例需要知道对每个 URL 请求运行哪些代码，所以保存了一个 URL 到 Python 函数的映射关系。处理 URL 和函数之间的关系的程序称为<strong>路由</strong>。</p>

<p>在 Flask 程序中定义路由的最简便方式，是使用程序实例提供的 <code class="highlighter-rouge">app.route</code> 修饰器，把修饰的函数注册为路由。</p>

<p><strong>修饰器</strong>是 Python 语言的标准特性，可以使用不同的方式修改函数的行为。惯常用法是使用修饰器把函数注册为事件的处理程序。</p>

<h5 id="4-def-index">4. def index()</h5>

<p><code class="highlighter-rouge">index()</code> 函数放在 <code class="highlighter-rouge">@app.route('/')</code> 后面，所以就是把 <code class="highlighter-rouge">index()</code> 函数注册为路由。</p>

<p>如果部署程序的服务器域名为 http://www.example.com ，在浏览器中访问 http://www.example.com 后，会触发服务器执行 <code class="highlighter-rouge">index()</code> 函数。</p>

<h5 id="5-approuteuser">5. @app.route(‘/user/<name>')</name></h5>

<p>同 <code class="highlighter-rouge">@app.route('/')</code>，如果部署程序的服务器域名为 http://www.example.com ，在浏览器中访问 http://www.example.com/user/Tom  后，会触发服务器执行下方修饰函数 <code class="highlighter-rouge">sayHello(name)</code>。</p>

<h5 id="6-if-__name__--__main__">6. <code class="highlighter-rouge">if __name__ == '__main__'</code></h5>

<p>详见 StackOverflow :</p>

<p><a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do">http://stackoverflow.com/questions/419163/what-does-if-name-main-do</a></p>

<p>大致翻一下：</p>

<blockquote>
  <p>当 Python 解释器，读 py 文件,它会执行它发现的所有代码。在执行代码之前，它会定义一些变量。例如，如果这个 py 文件就是主程序，它会设置 <code class="highlighter-rouge">__name__</code> 变量为 <code class="highlighter-rouge">"__main__"</code>。如果这个 py 被引入到别的模块，<code class="highlighter-rouge">__name__</code> 会被设置为该模块的名字。</p>

  <p>举个栗子： 创建一个 test.py 文件：</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if __name__ == '__main__':
	print '自己主动执行'
else:
	print '我被别的模块引入'
</code></pre></div>  </div>

  <p>执行下 <code class="highlighter-rouge">$ python test.py</code> 会输出自己主动执行 直接在命令行中输入 <code class="highlighter-rouge">python3</code> 随后输入 <code class="highlighter-rouge">import test</code>，会输出：<code class="highlighter-rouge">我被别的模块引入</code>。</p>
</blockquote>

<h5 id="7-apprundebugtrue">7. app.run(debug=True)</h5>

<p>程序实例用 <code class="highlighter-rouge">run()</code> 方法启动 Flask 继承的开发 Web 服务器。</p>

<p>服务器启动后，会进入轮询，等待并处理请求。轮询会一直进行，直到程序停止，比如按 Ctrl-C 键。</p>

<p><code class="highlighter-rouge">debug=True</code> 表示启用调试模式。方便我们调试。</p>

<h2 id="字符串拼接">字符串拼接</h2>

<h5 id="1-使用--号">1. 使用 <code class="highlighter-rouge">+</code> 号</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>str = 'hello' + 'world'
</code></pre></div></div>

<h5 id="2-使用字符串-join-方法">2. 使用字符串 <code class="highlighter-rouge">join()</code> 方法</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>names = ['tom', 'jerry']
nameStr = ' '.join(names)
</code></pre></div></div>

<h5 id="3-使用--号">3. 使用 <code class="highlighter-rouge">%</code> 号</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name = 'Tom'
str = '&lt;h1&gt; hello %s!&lt;/h1&gt;' % name
</code></pre></div></div>

<h5 id="4-format-方法">4. <code class="highlighter-rouge">format()</code> 方法</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>str = '{0} is not {1}'.format('Tom', 'Jerry')

str = '{who} is not {you}'.format(who='Tom', you='Jerry')
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
