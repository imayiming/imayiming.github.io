<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>jekyller.github.io/jasper/</title>
   
   <link>http://localhost:4000</link>
   <description>Stay hungry, stay foolish.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Flask Web 开发学习笔记（一）</title>
	  <link>//flask-web-01</link>
	  <author></author>
	  <pubDate>2015-03-15T07:13:05+08:00</pubDate>
	  <guid>//flask-web-01</guid>
	  <description><![CDATA[
	     <p>本文章主要整理：</p>
<blockquote>
  <p>0.如何使用虚拟环境<br />
1.如何用 <code class="highlighter-rouge">pip</code> 安装 Python 包（Demo：如何安装 <code class="highlighter-rouge">flask</code>）<br />
2.一个简单的 Demo</p>
</blockquote>

<h2 id="如何使用虚拟环境">如何使用虚拟环境</h2>

<p>在介绍使用虚拟环境前，需要提前安装 Python 3.4(<a href="http://iyiming.me/blog/2015/03/01/she-is-python/">原先写的文章有介绍</a>)。</p>

<p>Python 3.4 通过 <code class="highlighter-rouge">venv</code> 模块原生支持虚拟环境，命令为 <code class="highlighter-rouge">pyvenv</code>。</p>

<p><strong>1.创建一个名字为 <code class="highlighter-rouge">venv</code> 虚拟环境</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyvenv venv
</code></pre></div></div>

<p><strong>2.激活名字为： <code class="highlighter-rouge">venv</code> 的虚拟环境</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source venv/bin/activate
</code></pre></div></div>

<p><strong>3.激活虚拟环境命令会修改命令行提示符,显示如下:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(venv) $
</code></pre></div></div>

<p><strong>4.退出当前虚拟环境</strong></p>

<p>使用命令：<code class="highlighter-rouge">deactivate</code></p>

<h2 id="使用-pip-安装-python-包">使用 pip 安装 Python 包</h2>

<p>大多数 Python 包都使用 <code class="highlighter-rouge">pip</code> 实用工具安装，使用 <code class="highlighter-rouge">pyvenv</code> 创建的虚拟环境会自动安装 <code class="highlighter-rouge">pip</code>。</p>

<p><strong>1.使用 <code class="highlighter-rouge">pip</code> 安装 <code class="highlighter-rouge">Flask</code>（其它 Python 包同理）</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install flask
</code></pre></div></div>

<h2 id="一个简单的-demo">一个简单的 Demo</h2>

<pre><code class="language-PYTHON">from flask import Flask
from flask import abort
from flask import redirect

app = Flask(__name__)

@app.route('/')
def index():
    return '&lt;h1&gt;Hello World!&lt;/h1&gt;'

@app.route('/user/&lt;name&gt;')
def sayHello(name):
    if name == 'baidu':
        return redirect('http://www.baidu.com')
    elif name == 'NO':
        return abort(404)
        
    return '&lt;h1&gt; Hello,%s &lt;/h1&gt;' % name

if __name__ == '__main__':
    app.run(debug=True)
</code></pre>

<p>从 Demo 中学习路由、修饰器、视图函数、请求、响应概念，一步步分析每行代码：</p>

<p><strong>1.<code class="highlighter-rouge">from flask import Flask</code></strong></p>

<p>从 <code class="highlighter-rouge">flask</code> 库中导入 <code class="highlighter-rouge">Flask</code> 函数，<code class="highlighter-rouge">from flask import abort</code> 和 <code class="highlighter-rouge">from flask import redirect</code> 同理。</p>

<p><strong>2.<code class="highlighter-rouge">app = Flask(__name__)</code></strong></p>

<p>创建 <code class="highlighter-rouge">Flask</code> 对象 <code class="highlighter-rouge">app</code>，<code class="highlighter-rouge">Flask</code> 类的构造函数只有一个必须指定的参数，即程序主模块或包的名字。在大多数程序中，Python 的 <code class="highlighter-rouge">__name__</code> 变量就是所需要的值。</p>

<p><strong>3.<code class="highlighter-rouge">@app.route('/')</code></strong></p>

<p>客户端（例如 Web 浏览器）把请求发送给 Web 服务器,Web 服务器再把请求发送给 Flask 程序实例。程序实例需要知道对每个 URL 请求运行哪些代码，所以保存了一个 URL 到 Python 函数的映射关系。处理 URL 和函数之间的关系的程序称为<strong>路由</strong>。</p>

<p>在 Flask 程序中定义路由的最简便方式，是使用程序实例提供的 <code class="highlighter-rouge">app.route</code> 修饰器，把修饰的函数注册为路由。</p>

<p><strong>修饰器</strong>是 Python 语言的标准特性，可以使用不同的方式修改函数的行为。惯常用法是使用修饰器把函数注册为事件的处理程序。</p>

<p><strong>4.<code class="highlighter-rouge">def index():</code>函数</strong></p>

<p><code class="highlighter-rouge">index()</code> 函数放在 <code class="highlighter-rouge">@app.route('/')</code> 后面，所以就是把 <code class="highlighter-rouge">index()</code> 函数注册为路由。</p>

<p>如果部署程序的服务器域名为 <code class="highlighter-rouge">www.example.com</code>,在浏览器中访问 <code class="highlighter-rouge">www.example.com</code> 后，会触发服务器执行 <code class="highlighter-rouge">index()</code> 函数。</p>

<p><strong>5.<code class="highlighter-rouge">@app.route('/user/&lt;name&gt;')</code></strong></p>

<p>同 <code class="highlighter-rouge">@app.route('/')</code>，如果部署程序的服务器域名为 <code class="highlighter-rouge">www.example.com</code>，在浏览器中访问 <code class="highlighter-rouge">www.example.com/user/tom</code> 后，会触发服务器执行下方修饰函数 <code class="highlighter-rouge">sayHello(name)</code>。</p>

<p><strong>6.<code class="highlighter-rouge">sayHello(name)</code>函数</strong></p>

<pre><code class="language-PYTHON">    if name == 'baidu':
        return redirect('http://www.baidu.com')
    elif name == 'NO':
        return abort(404)
        
    return '&lt;h1&gt; Hello,%s &lt;/h1&gt;' % name
</code></pre>

<p>假定部署程序的服务器域名为 <code class="highlighter-rouge">www.example.com</code>。</p>

<p>在浏览器中访问 <code class="highlighter-rouge">www.example.com/user/baidu</code>，那么 <code class="highlighter-rouge">redirect()</code> 函数就直接链接到百度了。</p>

<p>注意的是，在使用 <code class="highlighter-rouge">redirect()</code> 函数之前，必须使用 <code class="highlighter-rouge">from flask import redirect</code> 从 flask 库中导入 <code class="highlighter-rouge">redirect()</code> 函数。</p>

<p>在浏览器中访问 <code class="highlighter-rouge">www.example.com/user/NO</code>，那么 <code class="highlighter-rouge">abort()</code> 函数就会触发。</p>

<p><code class="highlighter-rouge">abort()</code> 函数用于处理错误，<code class="highlighter-rouge">abort(404)</code> 返回 404 错误，<code class="highlighter-rouge">abort()</code>函数不会把控制权交还给调用它的函数，而是抛出异常把控制权交给Web服务器。</p>

<p>在浏览器中访问 <code class="highlighter-rouge">www.example.com/user/tom</code>，那么会正确执行，在浏览器中显示 <code class="highlighter-rouge">Hello,tom</code>。</p>

<p><strong>7.<code class="highlighter-rouge">if __name__ == '__main__':</code></strong></p>

<p>一开始也没弄懂，这句话是什么意思。在 <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do">StackOverflow</a> 中找到了答案。</p>

<p>大致翻一下：</p>
<blockquote>
  <p>当 Python 解释器，读 py 文件,它会执行它发现的所有代码。在执行代码之前，它会定义一些变量。例如，如果这个 py 文件就是主程序，它会设置<code class="highlighter-rouge">__name__</code>变量为<code class="highlighter-rouge">"__main__"</code>。如果这个 py 被引入到别的模块，<code class="highlighter-rouge">__name__</code>会被设置为该模块的名字。</p>

  <p>举个栗子：
创建一个 test.py 文件：</p>

  <pre><code class="language-PYTHON">if __name__ == '__main__':
	print '自己主动执行'
else:
	print '我被别的模块引入'
</code></pre>
</blockquote>

<blockquote>
  <p>执行下 <code class="highlighter-rouge">$ python test.py</code> 会输出<code class="highlighter-rouge">自己主动执行</code>
直接在命令行中输入 <code class="highlighter-rouge">python</code> 随后输入 <code class="highlighter-rouge">import test</code>，会输出：<code class="highlighter-rouge">我被别的模块引入</code>。</p>
</blockquote>

<p><strong>8.<code class="highlighter-rouge">app.run(debug=True)</code></strong></p>

<p>程序实例用 <code class="highlighter-rouge">run()</code> 方法启动 Flask 继承的开发 Web 服务器。</p>

<p>服务器启动后，会进入轮询，等待并处理请求。轮询会一直进行，直到程序停止，比如按<code class="highlighter-rouge">Ctrl-C</code>键。</p>

<p><code class="highlighter-rouge">debug=True</code>表示启用调试模式。方便我们调试。</p>

	  ]]></description>
	</item>


</channel>
</rss>
